from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, ElementClickInterceptedException
import time
from datetime import datetime
import json
import pandas as pd

# üß≠ Egyszer≈±s√≠tett, tiszta szelektorok
selectors = {
    "product_box": "a[href^='/shop/termek/']",
    "image": "img",
    "name": "h3",
    "price": "h4",
    "next_page_button": 'button.pagination-next', # A legut√≥bbi k√©p alapj√°n
    "cookie_accept_button": '#CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll' # A legfrissebb HTML alapj√°n
}

# üîß Selenium ind√≠t√°sa
options = Options()
options.add_argument("--start-maximized")
options.add_argument("--headless=new") # Ha nem akarsz grafikus fel√ºletet, vedd ki kommentb≈ël ezt
driver = webdriver.Chrome(options=options)

# üåê Oldal bet√∂lt√©se
url = "https://ipon.hu/kereses/shop?keyword=notebook"
driver.get(url)

# --- S√ºti ablak kezel√©se ---
try:
    # V√°rjuk meg, am√≠g a s√ºti ablak gombja megjelenik √©s kattinthat√≥v√° v√°lik
    cookie_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, selectors["cookie_accept_button"]))
    )
    cookie_button.click()
    print("S√ºti elfogad√≥ gombra kattintva.")
    time.sleep(2) # R√∂vid v√°rakoz√°s, am√≠g a s√ºti ablak elt≈±nik
except TimeoutException:
    print("S√ºti elfogad√≥ gomb nem tal√°lhat√≥ vagy nem kattinthat√≥ 10 m√°sodpercen bel√ºl (tal√°n m√°r elfogadva).")
except ElementClickInterceptedException:
    print("S√ºti gombra kattint√°s elkapva, val√≥sz√≠n≈±leg m√°sik elem takarja.")
    # Ezen a ponton sz√ºks√©g lehet manu√°lis hibakeres√©sre, ha m√©gsem t≈±nik el az akad√°lyoz√≥ elem.
except Exception as e:
    print(f"Hiba a s√ºti ablak kezel√©sekor: {e}")
# ---------------------------

# Adatgy≈±jt√©shez sz√ºks√©ges lista
all_products_data = []
pozicio_counter = 1 # A term√©k poz√≠ci√≥j√°nak sz√°ml√°l√≥ja az √∂sszes oldalon kereszt√ºl

while True:
    print(f"--- Oldal bet√∂lt√©se ---")
    
    # V√°rjuk meg, am√≠g a term√©kk√°rty√°k megjelennek.
    try:
        WebDriverWait(driver, 15).until( # N√∂velt√ºk a v√°rakoz√°si id≈ët 15 m√°sodpercre
            EC.presence_of_all_elements_located((By.CSS_SELECTOR, selectors["product_box"]))
        )
    except TimeoutException:
        print(f"Nincsenek term√©kek az oldalon 15 m√°sodpercen bel√ºl, felt√©telezhet≈ëen az utols√≥ oldalon vagyunk vagy hiba t√∂rt√©nt.")
        break
    except Exception as e:
        print(f"Hiba a term√©kek bet√∂lt√©sekor az oldalon: {e}")
        break 

    # üì¶ Term√©kk√°rty√°k kiv√°laszt√°sa
    product_cards = driver.find_elements(By.CSS_SELECTOR, selectors["product_box"])
    print(f"üîç Tal√°lt term√©kdobozok sz√°ma az aktu√°lis oldalon: {len(product_cards)}")

    if not product_cards: # Ha nincsenek term√©kk√°rty√°k az oldalon, akkor val√≥sz√≠n≈±leg v√©ge
        print("Nincsenek term√©kek az oldalon, felt√©telezhet≈ëen az utols√≥ oldalon vagyunk.")
        break

    for card in product_cards:
        try:
            # Ellen≈ërizz√ºk, hogy a k√°rtya tartalmaz-e relev√°ns adatokat
            name_element = card.find_elements(By.CSS_SELECTOR, selectors["name"])
            price_element = card.find_elements(By.CSS_SELECTOR, selectors["price"])

            if not (name_element and price_element):
                #print("Skipping a card without name or price.") 
                continue

            product_link = card.get_attribute("href")
            image_element = card.find_elements(By.CSS_SELECTOR, selectors["image"])
            image = image_element[0].get_attribute("data-img") if image_element else ""

            name = name_element[0].text.strip()
            price_text = card.find_element(By.CSS_SELECTOR, selectors["price"]).text.strip()
            # √År tiszt√≠t√°sa √©s sz√°mm√° alak√≠t√°sa (sz√≥k√∂z√∂k elt√°vol√≠t√°sa, csak sz√°mjegyek megtart√°sa)
            price = int(''.join(filter(str.isdigit, price_text))) if price_text else None

            category_link = driver.current_url
            time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            product_data = {
                "product_link": product_link,
                "category_link": category_link,
                "image": image,
                "name": name,
                "price": price,
                "pozicio": pozicio_counter,
                "time": time_now
            }
            all_products_data.append(product_data)
            pozicio_counter += 1

        except Exception as e:
            print(f"‚ö†Ô∏è Hiba term√©k feldolgoz√°s√°n√°l (poz√≠ci√≥: {pozicio_counter}): {e}")
            continue

    # Lapoz√°s
    try:
        # V√°rjuk meg, am√≠g a k√∂vetkez≈ë oldal gombja megjelenik √©s kattinthat√≥v√° v√°lik
        next_page_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, selectors["next_page_button"]))
        )

        # Ellen≈ërizz√ºk, hogy a gomb inakt√≠v-e a 'disabled' attrib√∫tum alapj√°n
        if next_page_button.get_attribute("disabled"):
             print("Nincs t√∂bb oldal a lapoz√°shoz (a gomb inakt√≠v, 'disabled' attrib√∫tummal).")
             break
        
        next_page_button.click()
        print("Kattint√°s a k√∂vetkez≈ë oldalra...")
        time.sleep(2) # R√∂vid v√°rakoz√°s a k√∂vetkez≈ë oldal bet√∂lt√©s√©re
    except TimeoutException:
        print("Nincs t√∂bb oldal a lapoz√°shoz (nem tal√°lhat√≥ a k√∂vetkez≈ë oldal gomb 10 m√°sodpercen bel√ºl).")
        break 
    except Exception as e:
        print(f"Hiba a lapoz√°s sor√°n: {e}")
        break 

# üö™ Lez√°r√°s
driver.quit()

# üíæ Adatok ment√©se JSON f√°jlba
output_json_file = "ipon_notebooks.json"
with open(output_json_file, 'w', encoding='utf-8') as f:
    json.dump(all_products_data, f, ensure_ascii=False, indent=4)
print(f"Adatok mentve a '{output_json_file}' f√°jlba.")

# üìä Adatok export√°l√°sa Excelbe
df = pd.DataFrame(all_products_data)

# Az XLSX template oszlopneveinek megfeleltet√©se
df = df.rename(columns={
    'product_link': 'A term√©k ipon.hu linkje',
    'category_link': 'A gy≈±jt≈ëoldal linkje',
    'image': 'A term√©kk√©p src-je (megnyithat√≥ url)',
    'name': 'A term√©k neve',
    'price': 'A term√©k √°ra, egyszer≈± sz√°m',
    'pozicio': 'Poz√≠ci√≥', 
    'time': 'Az adatgy≈±jt√©s id≈ëpontja'
})

output_excel_file = "ipon_notebooks.xlsx"
df.to_excel(output_excel_file, index=False)
print(f"Adatok export√°lva a '{output_excel_file}' Excel f√°jlba.")